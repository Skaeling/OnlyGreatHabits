from celery import shared_task
import json
from django_celery_beat.models import IntervalSchedule, PeriodicTask

from habits.models import Habit
from habits.services import check_time, send_message


@shared_task
def create_or_update_plan(pk):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–º–µ—é—â–∏–π—Å—è"""

    habit = Habit.objects.get(pk=pk)
    start = check_time(habit.start_time)
    schedule, created = IntervalSchedule.objects.get_or_create(
        every=habit.regularity,
        period=IntervalSchedule.MINUTES,
    )

    task, not_updated = PeriodicTask.objects.update_or_create(
        name=f"Send habit ‚Ññ{habit.pk} to {habit.user.username}",
        defaults={
            "interval": schedule,
            "name": f"Send habit ‚Ññ{habit.pk} to {habit.user.username}",
            "task": "habit.tasks.send_tg_notification",
            "args": json.dumps([habit.pk]),
            "start_time": start,
        },
    )
    if not_updated:
        return f"Routine plan for habit ‚Ññ{habit.pk} created"
    return f"Routine plan for habit ‚Ññ{habit.pk} updated"


@shared_task(name="habit.tasks.send_tg_notification")
def send_tg_notification(pk):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –¢–µ–ª–µ–≥—Ä–∞–º —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ chat_id"""

    habit = Habit.objects.get(pk=pk)
    place = " –≤ " + habit.place if habit.place else ""
    message = (
        f'<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ<tg-emoji emoji-id="5368324170671202286">‚ùó</tg-emoji></b>'
        f'\n{habit.action.capitalize()}{place}, –Ω–∞—á–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ {habit.start_time.strftime("%H:%M")}.'
    )
    if habit.reward:
        message += f'\n\n<b>–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ' \
                   f'<tg-emoji emoji-id="5368324170671202286">‚≠ê</tg-emoji></b> ' \
                   f'\n{habit.reward.capitalize()}'
    elif habit.associated_habit:
        message += f'\n\n<b>–í–∞—à–∞ –ø—Ä–∏—è—Ç–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è' \
                   f'<tg-emoji emoji-id="5368324170671202286">üëç</tg-emoji></b> ' \
                   f'\n{habit.associated_habit.action.capitalize()}'

    if not habit.user.tg_chat_id:
        # –≤–æ–∑–º–æ–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–∏—Å—å–º–æ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞ –ø–æ—á—Ç—É
        return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–µ —É–∫–∞–∑–∞–Ω chat_id"

    if send_message(habit.user.tg_chat_id, message):
        return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {habit.user.username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'


@shared_task
def delete_plan(pk, username):
    PeriodicTask.objects.filter(name=f"Send habit ‚Ññ{pk} to {username}").delete()
